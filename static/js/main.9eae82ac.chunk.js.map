{"version":3,"sources":["components/Stopwatch/Stopwatch.tsx","App.tsx","index.tsx"],"names":["Stopwatch","useState","timeInSeconds","setTimeInSeconds","timerArray","setTimerArray","intervalId","setIntervalId","running","setRunning","Subject","waitSubject","useEffect","timeArray","time","hours","Math","floor","minutes","seconds","calculateTimer","pipe","map","Date","getTime","bufferCount","filter","timestamps","subscribe","clearInterval","className","type","onClick","interval","setInterval","previousState","next","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAyHeA,EApHa,WAC1B,MAA0CC,mBAAiB,GAA3D,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAiC,IAArE,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAiB,GAArD,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAkB,GAAhD,mBAAOO,EAAP,KAAgBC,EAAhB,KAkBA,EAAsBR,mBAA2B,IAAIS,KAA9CC,EAAP,oBAsBAC,qBAAU,WACR,IAAMC,EAvCe,SAACC,GACtB,IAAMC,EAAgBC,KAAKC,MAAMH,EAAO,MAClCI,EAAkBF,KAAKC,OAAOH,EAAgB,KAARC,GAAiB,IACvDI,EAAkBL,EAAgB,KAARC,EAA2B,GAAVG,EAMjD,MAAO,CAJaH,EAAQ,GAAR,WAAiBA,GAAUA,EACzBG,EAAU,GAAV,WAAmBA,GAAYA,EAC/BC,EAAU,GAAV,WAAmBA,GAAYA,GAgCXC,CAAelB,GAjBzDS,EAAYU,KACVC,aAAI,kBAAM,IAAIC,MAAOC,aACrBC,YALiB,EAKO,GACxBC,aAAO,SAACC,GACN,OAAOA,EAAW,IAAK,IAAIJ,MAAOC,UANhB,QAQpBI,WAAU,WACVC,cAAcvB,GACdG,GAAYD,MAadH,EAAcQ,KACb,CAACX,IA6BJ,OACE,qCACE,0BAAS4B,UAAU,0CAAnB,UACE,4BAAI1B,EAAW,KACf,qCACA,4BAAIA,EAAW,KACf,qCACA,4BAAIA,EAAW,QAGjB,sBAAK0B,UAAU,gCAAf,UACE,wBACEC,KAAK,SACLC,QAxCsB,WAC5B,GAAKxB,EAOHqB,cAAcvB,GACdH,EAAiB,OARL,CACZ,IAAM8B,EAAgBC,aAAY,WAChC/B,GAAiB,SAACgC,GAAD,OAA2BA,EAAgB,OAC3D,KAEH5B,EAAc0B,GAMhBxB,GAAYD,IA6BNsB,UAAU,0BAHZ,wBAOA,wBACEC,KAAK,SACLC,QA3Dc,WACpBrB,EAAYyB,MAAK,IA2DXN,UAAU,+BAHZ,kBAOA,wBACEC,KAAK,SACLC,QAvCkB,WACxB,GAAIxB,EAAS,CACXqB,cAAcvB,GACdH,EAAiB,GACjB,IAAM8B,EAAgBC,aAAY,WAChC/B,GAAiB,SAACgC,GAAD,OAA2BA,EAAgB,OAC3D,KAEH5B,EAAc0B,KAgCVH,UAAU,0BAHZ,0BCxGKO,G,YAAgB,WAC3B,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,QCHNQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9eae82ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Subject, map, bufferCount, filter,\n} from 'rxjs';\n\nconst Stopwatch: React.FC = () => {\n  const [timeInSeconds, setTimeInSeconds] = useState<number>(0);\n  const [timerArray, setTimerArray] = useState<Array<number | string>>([]);\n  const [intervalId, setIntervalId] = useState<number>(0);\n  const [running, setRunning] = useState<boolean>(false);\n\n  const calculateTimer = (time: number): Array<number | string> => {\n    const hours: number = Math.floor(time / 3600);\n    const minutes: number = Math.floor((time - (hours * 3600)) / 60);\n    const seconds: number = time - (hours * 3600) - (minutes * 60);\n\n    const hoursFormat = hours < 10 ? `0${hours}` : hours;\n    const minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\n    const secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\n\n    return [\n      hoursFormat,\n      minutesFormat,\n      secondsFormat,\n    ];\n  };\n\n  const [waitSubject] = useState<Subject<boolean>>(new Subject());\n\n  const handleWaitClick = () => {\n    const clickCount = 2;\n    const clickTimespan = 300;\n\n    waitSubject.pipe(\n      map(() => new Date().getTime()),\n      bufferCount(clickCount, 1),\n      filter((timestamps) => {\n        return timestamps[0] > new Date().getTime() - clickTimespan;\n      }),\n    ).subscribe(() => {\n      clearInterval(intervalId);\n      setRunning(!running);\n    });\n  };\n\n  const emitWaitEvent = () => {\n    waitSubject.next(true);\n  };\n\n  useEffect(() => {\n    const timeArray: Array<number | string> = calculateTimer(timeInSeconds);\n\n    handleWaitClick();\n\n    setTimerArray(timeArray);\n  }, [timeInSeconds]);\n\n  const handleStartStopButton = () => {\n    if (!running) {\n      const interval: any = setInterval(() => {\n        setTimeInSeconds((previousState: number) => previousState + 1);\n      }, 1000);\n\n      setIntervalId(interval);\n    } else {\n      clearInterval(intervalId);\n      setTimeInSeconds(0);\n    }\n\n    setRunning(!running);\n  };\n\n  const handleResetButton = () => {\n    if (running) {\n      clearInterval(intervalId);\n      setTimeInSeconds(0);\n      const interval: any = setInterval(() => {\n        setTimeInSeconds((previousState: number) => previousState + 1);\n      }, 1000);\n\n      setIntervalId(interval);\n    }\n  };\n\n  return (\n    <>\n      <section className=\"d-flex justify-content-center display-3\">\n        <p>{timerArray[0]}</p>\n        <span>:</span>\n        <p>{timerArray[1]}</p>\n        <span>:</span>\n        <p>{timerArray[2]}</p>\n      </section>\n\n      <div className=\"d-flex justify-content-center\">\n        <button\n          type=\"button\"\n          onClick={handleStartStopButton}\n          className=\"btn btn-outline-primary\"\n        >\n          Start/Stop\n        </button>\n        <button\n          type=\"button\"\n          onClick={emitWaitEvent}\n          className=\"btn btn-outline-primary mx-2\"\n        >\n          Wait\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleResetButton}\n          className=\"btn btn-outline-primary\"\n        >\n          Reset\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default Stopwatch;\n","import React from 'react';\nimport Stopwatch from './components/Stopwatch/Stopwatch';\nimport './App.scss';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Stopwatch />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}